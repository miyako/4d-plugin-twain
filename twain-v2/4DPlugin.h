/* --------------------------------------------------------------------------------
 #
 #	4DPlugin.h
 #	source generated by 4D Plugin Wizard
 #	Project : TWAIN
 #	author : miyako
 #	2017/11/27
 #
 # --------------------------------------------------------------------------------*/

//#include "twain_dsm.h"

#define PRODUCT_VENDOR_NAME "4D"
#define PRODUCT_FAMILY_NAME "4D"
#define PRODUCT_NAME "4D"

#define CMD_Get_database_localization 1009

#include "twain_jpg.h"
#include "twain_png.h"

#include "twain_json.h"
// --- TWAIN
void TWAIN_SCANNERS_LIST(sLONG_PTR *pResult, PackagePtr pParams);
void TWAIN_Get_default_option(sLONG_PTR *pResult, PackagePtr pParams);
void TWAIN_SCAN(sLONG_PTR *pResult, PackagePtr pParams);

#define CAP_VALUE_BUF_SIZE 1024

#if VERSIONWIN
unsigned __stdcall doScanWin(void *p);
unsigned __stdcall getOptionWin(void *p);
#endif

void doScan(C_TEXT &Param1_scanner,
						std::wstring& Param2_option,
						C_BLOB& data,
						TW_UINT16 majorNum,
						TW_UINT16 minorNum,
						TW_UINT16 language,
						TW_UINT16 country,
						int Param3_format);
void getOption(C_TEXT& Param1_scanner, std::wstring& Param2_option, C_BLOB& data,
							 TW_UINT16 majorNum, TW_UINT16 minorNum, TW_UINT16 language, TW_UINT16 country);

/* thread stuff */

#if VERSIONWIN
HANDLE createFmIn1(C_TEXT& Param1_scanner,
									 C_TEXT& Param2_option,
									 std::wstring& ParamA,
									 std::wstring& ParamB,
									 DWORD *ParamA_len,
									 DWORD *ParamB_len,
									 DWORD *Param1_len,
									 DWORD *Param2_len);
HANDLE createFmIn2(DWORD *ParamA_len,
									 DWORD *ParamB_len,
									 DWORD *Param1_len,
									 DWORD *Param2_len);
HANDLE createEventforBufIn2(LPVOID bufIn,
														DWORD ParamA_len,
														DWORD ParamB_len,
														DWORD Param1_len,
														DWORD Param2_len,
														std::wstring& ParamA,
														std::wstring& ParamB,
														C_TEXT& Param1_scanner,
														std::wstring& Param2_option);
HANDLE createFmOut2(C_BLOB* data);
void getDataFromThread2(C_BLOB& data);
void waitForEvent(HANDLE h, HANDLE scanEvent_p, C_BLOB& data, std::wstring& ParamB, DWORD len);
#endif
